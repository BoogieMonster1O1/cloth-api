import java.text.SimpleDateFormat

plugins {
    id 'fabric-loom' version '0.2.7-SNAPSHOT'
    id 'maven-publish'
    id 'maven'
    id 'signing'
    id 'com.jfrog.bintray' version '1.8.4'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

sourceCompatibility = targetCompatibility = 1.8

group = "me.shedaniel.cloth"
archivesBaseName = "cloth-events"
version = ((String) project.mod_version).contains("unstable") ? (project.mod_version + "." + buildTime()) : project.mod_version

minecraft {
}

processResources {
    filesMatching('fabric.mod.json') {
        expand 'version': project.version
    }
    inputs.property "version", project.version
}

static def buildTime() {
    def df = new SimpleDateFormat("yyyyMMddHHmm")
    df.setTimeZone(TimeZone.getTimeZone("UTC"))
    return df.format(new Date())
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_version}:v2"
    modCompile "net.fabricmc:fabric-loader:${project.fabric_loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modCompile "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modCompile "io.github.prospector:modmenu:${modmenu_version}"

    afterEvaluate {
        def listAdded = []
        def eachDep = { dep ->
            for (apiIncludeDepStr in (api_include as String).split(',')) {
                def apiIncludeGroup = apiIncludeDepStr.split(':')[0]
                def apiIncludeDep = apiIncludeDepStr.split(':')[1]
                if (dep.module.id.group == apiIncludeGroup && dep.module.id.name.startsWith(apiIncludeDep)) {
                    def version = dep.module.id.version.indexOf('@') >= 0 ? dep.module.id.version.substring(0, dep.module.id.version.indexOf('@')) : dep.module.id.version
                    def mavenDep = "${dep.module.id.group}:${dep.module.id.name}:$version"
                    if (!(mavenDep in listAdded)) {
                        include(mavenDep) {
                            transitive = false
                        }
                        listAdded.add(mavenDep)
                    }
                    break
                }
            }
        }
        configurations.compile.resolvedConfiguration.firstLevelModuleDependencies.each eachDep
        configurations.runtimeClasspath.resolvedConfiguration.firstLevelModuleDependencies.each eachDep
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_KEY')
    publications = ["MyPublication"]
    override = true
    pkg {
        repo = "cloth-events"
        name = "cloth-events"
        userOrg = "shedaniel"
        licenses = ["Unlicense"]
        version {
            name = project.version
            vcsTag = project.version
            released = new Date()
            desc = "Cloth Events API for Minecraft"
            githubRepo = 'shedaniel/Cloth'
            websiteUrl = 'https://github.com/shedaniel/Cloth'
            issueTrackerUrl = 'https://github.com/shedaniel/Cloth/issues'
            vcsUrl = 'https://github.com/shedaniel/Cloth.git'
            gpg {
                sign = true
            }
        }
    }
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set("sources")
    from sourceSets.main.allSource
}

task javadocs(type: Javadoc) {
    source = sourceSets.main.allJava
}

task javadocsJar(type: Jar, dependsOn: javadocs) {
    archiveClassifier.set("javadocs")
    from javadocs.destinationDir
}

publishing {
    publications {
        MyPublication(MavenPublication) {
            artifact(file("${project.buildDir}/libs/${project.archivesBaseName}-${project.version}.jar")) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
            artifact javadocsJar
            groupId 'me.shedaniel.cloth'
            artifactId 'cloth-events'
            version = project.version
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'Cloth Events API for Minecraft')
                root.appendNode('name', 'cloth-events')
                root.appendNode('url', 'https://github.com/shedaniel/Cloth')
                root.appendNode('packaging', 'jar')
                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 'Unlicense')
                license.appendNode('url', 'http://unlicense.org')
                license.appendNode('distribution', 'repo')
                def developers = root.appendNode('developers')
                def shedaniel = developers.appendNode('developer')
                shedaniel.appendNode('id', 'shedaniel')
                shedaniel.appendNode('name', 'shedaniel')
                shedaniel.appendNode('email', 'daniel@shedaniel.me')
                def scm = root.appendNode('scm')
                scm.appendNode('url', "https://github.com/shedaniel/Cloth")
                scm.appendNode('connection', "scm:git:git://github.com/shedaniel/Cloth.git")
                scm.appendNode('developerConnection', "scm:git:ssh://github.com:shedaniel/Cloth.git")
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
    }
}

curseforge {
    apiKey = project.hasProperty('apiKey') ? project.property('apiKey') : System.getenv('CF_API_KEY')
    if (apiKey != null)
        project {
            id = '317121'
            releaseType = 'beta'
            addGameVersion '1.16-Snapshot'
            addGameVersion 'Java 8'
            relations {
                requiredDependency 'fabric-api'
            }
            mainArtifact(file("${project.buildDir}/libs/${project.archivesBaseName}-${project.version}.jar")) {
                displayName = "[Fabric 20w12a] v$project.version"
            }
            addArtifact(file("${project.buildDir}/libs/${project.archivesBaseName}-${project.version}-sources.jar")) {
                displayName = "[Fabric 20w12a] v$project.version Sources"
            }
            afterEvaluate {
                uploadTask.dependsOn("remapJar")
                uploadTask.dependsOn("remapSourcesJar")
            }
        }
    options {
        forgeGradleIntegration = false
        javaVersionAutoDetect = false
    }
}